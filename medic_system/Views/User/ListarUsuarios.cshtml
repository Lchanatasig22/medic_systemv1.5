@model List<Usuario>
@{
    ViewData["Title"] = "ListarUsuarios";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Lista de Usuarios</h1>

<style>
    .d-none {
        display: none;
    }

    .no-results {
        text-align: center;
        padding: 20px;
        background-color: #f8d7da;
        color: #721c24;
        margin-top: 10px;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
    }
</style>

<div class="form-group">
    <div class="row">
        <div class="col-md-3">
            <label for="opcion">Buscar por</label>
            <select class="form-control" id="opcion">
                <option value="-2">Listar todo</option>
                <option value="1">Nombre(s)</option>
                <option value="2">Número de documento</option>
                <option value="3">Email</option>
                <option value="4">Nacionalidad</option>
            </select>
        </div>
        <div class="col-md-5 d-none" id="buscarFields">
            <label>&nbsp;</label>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Ingresar criterio de búsqueda" id="buscarCriterio" />
                <div class="input-group-append">
                    <button class="btn btn-primary" type="button" id="buscarBtn">Buscar</button>
                </div>
            </div>
        </div>
    </div>
</div>

<hr />

<div class="table-responsive-sm d-none d-lg-block">
    <table class="table table-bordered table-striped">
        <thead>
            <tr class="table-primary">
                <th>Acciones</th>
                <th>Nombre</th>
                <th>Número de documento</th>
                <th>Email</th>
                <th>Establecimiento</th>
         
                <th>Rol</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in Model)
            {
                <tr data-id="@usuario.IdUsuario">
                    <td>
                        <a asp-action="EditarUsuario" asp-route-id="@usuario.IdUsuario" class="btn btn-outline-primary">
                            <i class="fa-regular fa-pen-to-square"></i> Revisar
                        </a>
                        <form asp-action="EliminarUsuario" method="post" style="display:inline;">
                            <input type="hidden" name="id" value="@usuario.IdUsuario" />
                            <button type="submit" class="btn btn-outline-danger" onclick="return confirm('¿Estás seguro de que deseas eliminar este usuario?');">
                                <i class="fa-solid fa-trash"></i> Eliminar
                            </button>
                        </form>
                    </td>
                    <td>@usuario.NombresUsuario @usuario.ApellidosUsuario</td>
                    <td>@usuario.CiUsuario</td>
                    <td>@usuario.EmailUsuario</td>
                    <td>@usuario.Establecimiento?.DescripcionEstablecimiento</td>
                    <td>@usuario.Perfil?.NombrePerfil</td>
                </tr>
            }
        </tbody>
    </table>
    <div id="noResults" class="no-results d-none">
        No se encontraron resultados. <button class="btn btn-outline-primary" onclick="crearNuevo()">Crear nuevo</button>
    </div>
</div>


<div class="card-columns d-lg-none">

    @foreach (var usuario in Model)
    {
        <div class="card">
            <div class="card-body" data-id="@usuario.IdUsuario">
                <h5 class="card-title">@usuario.NombresUsuario @usuario.ApellidosUsuario </h5>
                <p class="card-text"><strong>Número de documento: </strong>@usuario.CiUsuario </p>
                <p class="card-text"><strong>Email: </strong>@usuario.EmailUsuario </p>
                <p class="card-text"><strong>Establecimiento : </strong>@usuario.Establecimiento?.DescripcionEstablecimiento </p>
                <p class="card-text"><strong> Rol: </strong>@usuario.Perfil?.NombrePerfil</p>
                <a asp-action="EditarUsuario" asp-route-id="@usuario.IdUsuario" class="btn btn-outline-primary">
                    <i class="fa-regular fa-pen-to-square"></i> Revisar
                </a>
                <form asp-action="EliminarUsuario" method="post" style="display:inline;">
                    <input type="hidden" name="id" value="@usuario.IdUsuario" />
                    <button type="submit" class="btn btn-outline-danger" onclick="return confirm('¿Estás seguro de que deseas eliminar este usuario?');">
                        <i class="fa-solid fa-trash"></i> Eliminar
                    </button>
                </form>
            </div>
        </div>
    }

</div>


<a asp-action="CrearUsuario" asp-controller="User" class="btn btn-outline-primary"> <i class="fa fa-plus"></i> Crear Nuevo</a>


@section Scripts {

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const opcionSelect = document.getElementById('opcion');
            const buscarFields = document.getElementById('buscarFields');
            const buscarBtn = document.getElementById('buscarBtn');
            const buscarCriterio = document.getElementById('buscarCriterio');
            const noResults = document.getElementById('noResults');

            opcionSelect.addEventListener('change', onSearchChanged);
            buscarBtn.addEventListener('click', onSearch);

            function onSearchChanged() {
                if (opcionSelect.value === '-2') {
                    buscarFields.classList.add('d-none');
                    showAllRows();
                    showAllCards();
                    noResults.classList.add('d-none');
                } else {
                    buscarFields.classList.remove('d-none');
                }
            }

            function onSearch() {
                const criterio = buscarCriterio.value.toLowerCase();
                const optionValue = opcionSelect.value;
                const rows = document.querySelectorAll('tbody tr');
                const cards = document.querySelectorAll('.card-body');
                let found = false;

                rows.forEach(row => {
                    const cellValue = getCellValue(row, optionValue).toLowerCase();
                    if (cellValue.includes(criterio)) {
                        row.style.display = '';
                        found = true;
                    } else {
                        row.style.display = 'none';
                    }
                });

                cards.forEach(card => {
                    const cellValue = getCardValue(card, optionValue).toLowerCase();
                    if (cellValue.includes(criterio)) {
                        card.parentElement.style.display = '';
                        found = true;
                    } else {
                        card.parentElement.style.display = 'none';
                    }
                });

                if (!found) {
                    noResults.classList.remove('d-none');
                } else {
                    noResults.classList.add('d-none');
                }
            }

            function getCellValue(row, optionValue) {
                switch (optionValue) {
                    case '1':
                        return row.cells[1].innerText;
                    case '2':
                        return row.cells[2].innerText;
                    case '3':
                        return row.cells[3].innerText;
                    case '4':
                        return row.cells[6].innerText;
                    default:
                        return '';
                }
            }

            function getCardValue(card, optionValue) {
                switch (optionValue) {
                    case '1':
                        return card.querySelector('.card-title').innerText;
                    case '2':
                        return card.querySelector('.card-text:nth-of-type(1)').innerText.split(': ')[1];
                    case '3':
                        return card.querySelector('.card-text:nth-of-type(2)').innerText.split(': ')[1];
                    case '4':
                        return card.querySelector('.card-text:nth-of-type(5)').innerText.split(': ')[1];
                    default:
                        return '';
                }
            }

            function showAllRows() {
                const rows = document.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    row.style.display = '';
                });
            }

            function showAllCards() {
                const cards = document.querySelectorAll('.card-body');
                cards.forEach(card => {
                    card.parentElement.style.display = '';
                });
            }

            var successMessage = '@TempData["SuccessMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';

            if (successMessage) {
                Swal.fire({
                    icon: 'success',
                    title: 'Éxito',
                    text: successMessage
                });
            }

            if (errorMessage) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage
                });
            }

            window.confirmarEliminar = function (id) {
                Swal.fire({
                    title: '¿Estás seguro?',
                    text: "Esta acción no se puede deshacer.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, eliminar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        eliminarPaciente(id);
                    }
                });
            };

            function eliminarPaciente(id) {
                const form = document.createElement('form');
                form.method = 'post';
                form.action = '@Url.Action("EliminarPaciente", "Patient")';

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'id';
                input.value = id;

                form.appendChild(input);
                document.body.appendChild(form);
                form.submit();
            }
        });
    </script>

}


